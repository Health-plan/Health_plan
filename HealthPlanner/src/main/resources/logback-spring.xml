<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE xml>
<configuration debug="true"> 

<!-- DEBUG용 -->
	<!-- appenders : 전달받은 로그를 어디에 출력할지 결정(콘솔 출력, 파일 저장, DB 저장 등) -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder : appender에 포함되어 출력할 로그의 형식을 지정 -->
		<encoder>
			<Pattern>%d %5p [%c] %m%n</Pattern>
		</encoder>
	</appender>
	<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
	
<!-- INFO 레벨용 -->
		<encoder>
			<Pattern>%d %5p %m%n</Pattern>
		</encoder>
	</appender>
	
	<!-- Logger -->
	<!-- logger : 로그를 출력하는 요소로 'level' 속성을 통해서 출력할 로그의 레벨을 조절하여 appender에 전달 -->
	<logger name="com.health" level="DEBUG" appender-ref="console" /><!-- 첫번째 logger name = "src/main/java 디렉터리 안의 자바 패키지 경로" --> 
	<logger name="jdbc.sqlonly" level="INFO" appender-ref="console-infolog"/>
	<logger name="jdbc.resultsettable" level="INFO" appender-ref="console-infolog"/>


<!-- DEBUG레벨 로그를 출력하는 형식은 console이라는 이름의 appender를 사용 -->
	<logger name="org.springframework" level="error" />
	<logger name="org.springframework.jdbc" level="error" /> 
<!-- append level trace : 모든 로그를 출력합니다. debug : 개발할 때 디버그 용도로 사용됩니다. info 
		: 상태 변경 등과 같은 정보성 메세지를 나타냅니다. warn : 프로그램의 실행에는 문제 없지만 추후 시스템에러의 원인이 될 수 
		있다는 경고성 메세지를 의미합니다. error : 요청을 처리하던 도중 문제가 발생한 것을 의미합니다. --> 
<!-- 루트 로거 -->
	<root level="error">
		<appender-ref ref="console" />
	</root>
</configuration>

<!-- 로그 레벨

fatal : 아주 심각한 에러
error : 요청을 처리하는 중 문제가 발생한 상태
warn : 프로그램 실행에는 문제가 없지만, 나중에 시스템 에러의 원인이 될 수 있는 부분
info : '어떠한 상태 변경'과 같은 정보성 메시지
debug : 개발 시에 디버그 용도로 사용하는 메시지
trace : 디버그 레벨이 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 보여줌

 -->

<!-- 로그 타입

sqlonly : SQL 로그를 남기며, Prepared Statement와 관련된 파라미터는 자동으로 변경되어 SQL을 출력
sqltiming : SQL과 SQL 실행 시간(milliseconds 단위)을 출력
audit : ResultSet을 제외한 모든 JDBC 호출 정보를 출력(JDBC 관련 문제 추적하는 경우에만 보통 사용됨)
resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 출력
resultsettable : SQL 조회 결과를 테이블 형태로 출력
connection : Connection의 연결과 종료에 관련된 로그를 출력(커넥션 누수 문제 해결 시)

 -->